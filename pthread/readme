

The idea here is to dispatch a set of POSIX threads ( pthread ) which
receive some simple information from the calling main process and then
they just sleep based on what they were told to do. Then each pthread
will return some random data back to the main routine. Everything does
a bit of output and looking at the output pretty much reveals that we
have asynchronous stuff happening and then an neatly organized "join"
of those threads too.

The thread code is trivial : 

void *sleeper(void *recv_parm)
{
    thread_parm_t *p = (thread_parm_t *)recv_parm;

    printf("TRD  : %d sleeping %d seconds\n", p->tnum, p->sleep_time);
    sleep(p->sleep_time);
    printf("TRD  : %d awake\n", p->tnum);

    /* return some random data */
    p->ret_val = drand48();

    return (NULL);
}

Note that memory pressure is a very real thing and we can manage
some of that on Linux with : 

titan$ cat /proc/meminfo | grep -i 'commit'
CommitLimit:     6077292 kB
Committed_AS:      81192 kB
titan$ sysctl vm.overcommit_memory
vm.overcommit_memory = 0
titan$ sysctl vm.overcommit_ratio
vm.overcommit_ratio = 50
titan$ sysctl vm.overcommit_kbytes
vm.overcommit_kbytes = 0
titan$ wc -l /etc/sysctl.conf
68 /etc/sysctl.conf
titan$ sysctl -p  ^C
titan$ 
titan$ sysctl -w vm.overcommit_memory=1  ^C
titan$ 

see https://www.kernel.org/doc/html/v5.4/vm/overcommit-accounting.html


titan# 
titan# sysctl vm.overcommit_memory
vm.overcommit_memory = 0
titan# sysctl -w vm.overcommit_memory=1 
vm.overcommit_memory = 1
titan# sysctl vm.overcommit_memory
vm.overcommit_memory = 1
titan# cat /proc/meminfo | grep -i 'commit'
CommitLimit:     6077292 kB
Committed_AS:      79572 kB
titan# 



---------------------------------------------------------------------

on Solaris :
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -mt -c -o sysmem.o sysmem.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -mt -c -o ru.o ru.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -mt -c -o sysinfo.o sysinfo.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -mt -c -o p0.o p0.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -mt -o p0 p0.o sysinfo.o sysmem.o ru.o -lpthread -lrt


on FreeBSD with LLVM Clang
$CC -mthread-model posix $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o sysmem.o sysmem.c
$CC -mthread-model posix $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o ru.o ru.c
$CC -mthread-model posix $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o sysinfo.o sysinfo.c
$CC -mthread-model posix $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o p0.o p0.c
$CC -mthread-model posix $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -I. -c -o p0.o p0.c
$CC -mthread-model posix $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -I. -o p0 p0.o sysinfo.o sysmem.o ru.o -lpthread -lrt

on debian amd64 with gcc9 and most other places
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o sysmem.o sysmem.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o ru.o ru.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o sysinfo.o sysinfo.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o p0.o p0.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -o p0 p0.o sysinfo.o sysmem.o ru.o -lpthread -lrt


on debian 32-bit armv7 :

$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o sysmem.o sysmem.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o ru.o ru.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o sysinfo.o sysinfo.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -c -o p0.o p0.c
$CC $CFLAGS $CPPFLAGS -D_XOPEN_SOURCE=600 -D_REENTRANT -o p0 p0.o sysinfo.o sysmem.o ru.o -lpthread -lrt


From the Linux manpages for getrusage :

       Not  all  fields are completed;  unmaintained  fields  are
       set to zero by the kernel.  (The unmaintained fields are provided
       for compatibility with other systems, and because they may
       one day be supported on Linux.)  The fields are interpreted as
       follows:

       ru_utime
              This  is the total amount of time  spent  executing
              in user mode, expressed in a timeval structure 
              (seconds plus mibcroseconds).

       ru_stime
              This is the total amount of time spent executing in
kernel mode, expressed in a timeval  structure  (seconds  plus
              microseconds).

       ru_maxrss (since Linux 2.6.32)
              This  is the maximum resident  set  size  used  (in
kilobytes).   For  RUSAGE_CHILDREN, this is the resident set size
of
              the largest child, not  the  maximum  resident  set
size of the process tree.

       ru_ixrss (unmaintained)
              This field is currently unused on Linux.

       ru_idrss (unmaintained)
              This field is currently unused on Linux.

       ru_isrss (unmaintained)
              This field is currently unused on Linux.

       ru_minflt
              The number of page faults serviced without any  I/O
activity; here I/O activity is avoided by "reclaiming" a  page
              frame from the list of pages awaiting reallocation.

       ru_majflt
              The number of page faults  serviced  that  required
I/O activity.

       ru_nswap (unmaintained)
              This field is currently unused on Linux.

       ru_inblock (since Linux 2.6.22)
              The number of times the filesystem had  to  perform
input.

       ru_oublock (since Linux 2.6.22)
              The number of times the filesystem had  to  perform
output.

       ru_msgsnd (unmaintained)
              This field is currently unused on Linux.

       ru_msgrcv (unmaintained)
              This field is currently unused on Linux.

       ru_nsignals (unmaintained)
              This field is currently unused on Linux.

       ru_nvcsw (since Linux 2.6)
              The number of times a context switch  resulted  due
to a process voluntarily giving up the processor before its time
              slice was completed (usually to await  availability
of a resource).

       ru_nivcsw (since Linux 2.6)
              The number of times a context switch  resulted  due
to a higher priority process becoming runnable  or  because  the
              current process exceeded its time slice.


Be advised that some of the linux stuff is non-standard and  non-
portable however :

CONFORMING TO
       POSIX.1-2001,   POSIX.1-2008,   SVr4,   4.3BSD.    POSIX.1
specifies getrusage(), but specifies only the fields ru_utime and
       ru_stime.

       RUSAGE_THREAD is Linux-specific.


