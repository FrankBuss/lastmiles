

see https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm


May or may nor work.  Seems to work just fine.


Pollard Rho algorithm implementation with 64-bit data types has
a limitation at the 2^60 region. The largest reasonable numbers
to attempt will have prime factors no larger than 2^20 thus : 

fbsd$ echo '2 30 ^ pq' | dc
1073741824

fbsd$ primes 1073741700 1073741824
1073741717
1073741719
1073741723
1073741741
1073741783
1073741789

fbsd$ echo '1073741789 1073741783 * pq' | dc 
1152921423002469787

Also we can use a prime pair : 
nix$ echo '98765432697749 98765432697751 * pq' | dc 
9754610695973784842855062499

 
fbsd$ uname -a 
FreeBSD vesta 13.0-CURRENT FreeBSD 13.0-CURRENT r345741 GENERIC  amd64
fbsd$ /usr/bin/time -p ./pr_quiet 1152921423002469787
loop    1    count =         3    x =                     26    factor =          1
loop    2    count =         5    x =     970078746923582756    factor =          1
loop    3    count =         9    x =     988533639612436080    factor =          1
loop    4    count =        17    x =     567231184840781308    factor =          1
loop    5    count =        33    x =    1133462817720239055    factor =          1
loop    6    count =        65    x =      44002097199053742    factor =          1
loop    7    count =       129    x =     333495756174020631    factor =          1
loop    8    count =       257    x =     358679668650207688    factor =          1
loop    9    count =       513    x =     228102474313563072    factor =          1
loop   10    count =      1025    x =     455492478346626520    factor =          1
loop   11    count =      2049    x =     586937076482182844    factor =          1
loop   12    count =      4097    x =     698637346747441971    factor =          1
loop   13    count =      8193    x =     847629378199353859    factor =          1
loop   14    count =     16385    x =     256505182314725625    factor =          1
loop   15    count =     32769    x =     707693792251635493    factor =          1
loop   16    count =     65537    x =     815429361870967092    factor =          1
loop   17    count =    131073    x =     548304865194895878    factor =          1
loop   18    count =    262145    x =     658065450799704587    factor =          1
loop   19    count =    524289    x =     640743294668978805    factor =          1
loop   20    count =   1048577    x =      96945903316186521    factor =          1
loop   21    count =   2097153    x =     395137840875096862    factor =          1
loop   22    count =   4194305    x =     216572295558764613    factor =          1
loop   23    count =   8388609    x =     860389337707649447    factor =          1
loop   24    count =  16777217    x =     781327449588635288    factor =          1
loop   25    count =  33554433    x =      83445797587906536    factor =          1
loop   26    count =  38997205    x =     270539940637044753    factor = 1073741783
A factor of 1152921423002469787 is 1073741783
real 32.81
user 32.80
sys 0.00
fbsd$ 

fbsd$ /usr/bin/time -p ./pr_mpfr_quiet 1152921423002469787 113

We shall use 113 bits of precision.

We shall find a factor of 1152921423002469787.000000
All variables are initialized with 113 bits of precision.

------------------------------------------------------
loop            1    count =                3    x =                  26.000000    factor =                   1.000000
loop            2    count =                5    x =  973201909647360164.000000    factor =                   1.000000
loop            3    count =                9    x =  484880716927932693.000000    factor =                   1.000000
loop            4    count =               17    x =    4847349182591286.000000    factor =                   1.000000
loop            5    count =               33    x =  471467811046688549.000000    factor =                   1.000000
loop            6    count =               65    x =  908938341126918076.000000    factor =                   1.000000
loop            7    count =              129    x =  717566623216833442.000000    factor =                   1.000000
loop            8    count =              257    x =  397830834374666710.000000    factor =                   1.000000
loop            9    count =              513    x = 1110601492328386223.000000    factor =                   1.000000
loop           10    count =             1025    x =  177895104669537585.000000    factor =                   1.000000
loop           11    count =             2049    x = 1102403507274872880.000000    factor =                   1.000000
loop           12    count =             4097    x =  880139349340844804.000000    factor =                   1.000000
loop           13    count =             8193    x =  113307199087203623.000000    factor =                   1.000000
loop           14    count =            16385    x =  297522636979480518.000000    factor =                   1.000000
loop           15    count =            32769    x = 1031554788632883407.000000    factor =                   1.000000
loop           16    count =            65537    x =  319449334654392215.000000    factor =                   1.000000
loop           17    count =           131073    x =  737445217943555921.000000    factor =                   1.000000
loop           18    count =           262145    x =  319844932272235870.000000    factor =                   1.000000
loop           19    count =           524289    x =  755093638612390867.000000    factor =                   1.000000
loop           20    count =          1048577    x =  214397699898952475.000000    factor =                   1.000000
loop           21    count =          2097153    x =  231332978974415647.000000    factor =                   1.000000
loop           22    count =          4194305    x =  354992167341739479.000000    factor =                   1.000000
loop           23    count =          8388609    x =  847336436395383106.000000    factor =                   1.000000
loop           24    count =         16777217    x =  876911702592958909.000000    factor =                   1.000000
loop           25    count =         33554433    x = 1108774660048491918.000000    factor =                   1.000000
loop           26    count =         67108865    x = 1070703200849519632.000000    factor =                   1.000000
loop           27    count =        115724089    x =  306748760975518963.000000    factor =          1073741783.000000
A factor of 1152921423002469787.000000 is 1073741783.000000
real 15217.51
user 15214.28
sys 0.00
fbsd$

Wildly different computation times.

Here is some silly test data. 

nix$ factor 18446744073709551601131234567890124193
18446744073709551601131234567890124193: 1402572603950103863 13152077847348135911
nix$ 

nix$ echo '4115226300411521 12345678901234529 * pq' | dc
50805262510795942336027634608609

nix$ echo '12345701 12345678901234529* pq' | dc
152416060356650025909829


64 bit limit :

nix$ echo '2 64  ^ pq' | dc 
18446744073709551616
 
nix$ factor 18446744073709551601
18446744073709551601: 53 348051774975651917


nix$ echo '99k 1238926361552897 93461639715357977769163558199606896584051237541638188580280321 * pq' | dc
115792089237316195423570985008687907853269984665640564039457584007913\
129639937


nix$ factor 99999640000243
99999640000243: 9999973 9999991
nix$ 


Even using 64 bit uint64_t will result in bizarre behavior :


nix$ ./pr_quiet 99999640000243
loop        1    count =                3    x =               26    factor =                1
loop        2    count =                5    x =   33386160561893    factor =                1
loop        3    count =                9    x =   90162208914831    factor =                1
loop        4    count =               17    x =   13832264826550    factor =                1
loop        5    count =               33    x =   98412878383785    factor =                1
loop        6    count =               65    x =   13421133872418    factor =                1
loop        7    count =              129    x =   89030110771447    factor =                1
loop        8    count =              257    x =   22651453009420    factor =                1
loop        9    count =              513    x =   99473588100330    factor =                1
loop       10    count =             1025    x =   41446993208988    factor =                1
loop       11    count =             2049    x =   17055329457103    factor =                1
loop       12    count =             4097    x =   40081088618021    factor =                1
loop       13    count =             8193    x =   71413784494039    factor =                1
loop       14    count =            16385    x =   93637128298150    factor =                1
loop       15    count =            32769    x =   68400894321607    factor =                1
loop       16    count =            65537    x =   20256177278943    factor =                1
loop       17    count =           131073    x =   31616586020018    factor =                1
loop       18    count =           262145    x =   58053421126852    factor =                1
loop       19    count =           524289    x =   55989786788325    factor =                1
loop       20    count =          1048577    x =   96776461526928    factor =                1
loop       21    count =          1897219    x =   84622464077196    factor =          9999973
A factor of 99999640000243 is 9999973
nix$ 


nix$ 
nix$ ./pr_mpfr_quiet 99999640000243 113

We shall find a factor of 99999640000243.000000

We shall use 113 bits of precision.
All variables are initialized with 113 bits of precision.

------------------------------------------------------
loop        1    count =                3    x = 26.000000    factor = 1.000000
loop        2    count =                5    x = 6766704834564.000000    factor = 1.000000
loop        3    count =                9    x = 42924368496139.000000    factor = 1.000000
loop        4    count =               17    x = 32681874092650.000000    factor = 1.000000
loop        5    count =               33    x = 12339409137228.000000    factor = 1.000000
loop        6    count =               65    x = 59773708058208.000000    factor = 1.000000
loop        7    count =              129    x = 98684835615096.000000    factor = 1.000000
loop        8    count =              257    x = 33839476195984.000000    factor = 1.000000
loop        9    count =              513    x = 63749171357131.000000    factor = 1.000000
loop       10    count =             1025    x = 37182763958325.000000    factor = 1.000000
loop       11    count =             2049    x = 3017044558454.000000    factor = 1.000000
loop       12    count =              825    x = 97075120600963.000000    factor = 9999973.000000
A factor of 99999640000243.000000 is 9999973.000000
nix$ 



 Fermat 8 : 

$ echo ' 1238926361552897.000000   93461639715357977769163558199606896584051237541638188580280321 * pq' | dc     
115792089237316195423570985008687907853269984665640564039457584007913\
129639937.000000
$ 



Even on a reasonable Intel i7 we can expect to see some thrashing :

dclarke@titan:~/pgm/lastmiles/pollard_rho$ uname -a 
Linux titan 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5+deb10u1 (2019-07-19) x86_64 GNU/Linux


processor       : 0
vendor_id       : GenuineIntel
cpu family      : 6
model           : 60
model name      : Intel(R) Core(TM) i7-4810MQ CPU @ 2.80GHz
stepping        : 3
microcode       : 0x22
cpu MHz         : 1197.852
cache size      : 6144 KB
physical id     : 0
siblings        : 8


dclarke@titan:~/pgm/lastmiles/pollard_rho$ /usr/bin/time -p ./pr_mpfr_quiet 11579208923731619542357098500868790785326998466564056403                            9457584007913129639937 128 1                                                                                                                                    
INFO : will assume debug is requested.                                                                                                                          

We shall use 128 bits of precision.                                                                                                                             
INFO : chars_formatted = 86                                                                                                                                     
INFO : buf = '115792089237316195423570985008687907853269984665640564039457584007913129639936'                                                                   
WARN : incorrect data on input.                                                                                                                                 
     : this is most likely caused by insufficient bits                                                                                                          
     : of precision to represent the data correctly.                                                                                                            
INFO : Input variable re-initialized with 192 bits of precision.                                                                                                
INFO : we shall attempt to read input again.                                                                                                                    
INFO : chars_formatted = 86                                                                                                                                     
INFO : buf = '115792089237316195423570985008687907853269984665640564039457584007913129639936'                                                                   
WARN : incorrect data on input.                                                                                                                                 
     : this is most likely caused by insufficient bits                                                                                                          
     : of precision to represent the data correctly.                                                                                                            
INFO : Input variable re-initialized with 256 bits of precision.                                                                                                
INFO : we shall attempt to read input again.                                                                                                                    
INFO : chars_formatted = 86                                                                                                                                     
INFO : buf = '115792089237316195423570985008687907853269984665640564039457584007913129639936'                                                                   
WARN : incorrect data on input.                                                                                                                                 
     : this is most likely caused by insufficient bits                                                                                                          
     : of precision to represent the data correctly.                                                                                                            
INFO : Input variable re-initialized with 320 bits of precision.                                                                                                
INFO : we shall attempt to read input again.                                                                                                                    
INFO : chars_formatted = 86                                                                                                                                     
INFO : buf = '115792089237316195423570985008687907853269984665640564039457584007913129639937'                                                                   
INFO : perfect match on data input.                                                                                                                             

We shall find a factor of 115792089237316195423570985008687907853269984665640564039457584007913129639937.000000                                                 
------------------------------------------------------                                                                                                          
Pollard Rho shall proceed with 320 bits of precision.                                                                                                           
------------------------------------------------------                                                                                                          
loop      1    count =            3   x =                  26.000000   factor = 1.000000                                                                        
loop      2    count =            5   x = 44127887745906175987802.000000   factor = 1.000000                                                                    
WARN : mpfr_inexflag_flag is set.                                                                                                                               
WARN : mpfr_mul() raised a flag                                                                                                                                 
loop      3    All variables are re-initialized with 384 bits of precision.                                                                                     
WARN : mpfr_inexflag_flag is set.                                                                                                                               
WARN : mpfr_mul() raised a flag                                                                                                                                 
loop      3    All variables are re-initialized with 448 bits of precision.                                                                                     
WARN : mpfr_inexflag_flag is set.                                                                                                                               
WARN : mpfr_mul() raised a flag                                                                                                                                 
loop      3    All variables are re-initialized with 512 bits of precision.                                                                                     
loop      3    count =            9   x = 37528029320563145318125764069449894367780122691185286599275206329589461906406.000000   factor = 1.000000
loop      4    count =           17   x = 31536098040124079392726384860997665682624559670713323770852557009763985513269.000000   factor = 1.000000
loop      5    count =           33   x = 101781224077448587010321076904326055853688434737794212307073924863651306901171.000000   factor = 1.000000
loop      6    count =           65   x = 19535504584212471558516237317931715737210721913563868868302748378109852809370.000000   factor = 1.000000
loop      7    count =          129   x = 29658425761885146011127791280618461287798875470471572352310876336712487860905.000000   factor = 1.000000
loop      8    count =          257   x = 30187176826945436535357705693561976681225495341414173259228056551946428175766.000000   factor = 1.000000
loop      9    count =          513   x = 32840572557298846531804590991045465903946138452837043479583439945573555615440.000000   factor = 1.000000
loop     10    count =         1025   x = 56109920745726513814576147880952879283646068379622770938709855868106724646457.000000   factor = 1.000000
loop     11    count =         2049   x = 7478249072517372789125115522527766110597521076100678436613877059191655742396.000000   factor = 1.000000
loop     12    count =         4097   x = 40095525686442894297335809187239970545506254645046373675795391624453648742644.000000   factor = 1.000000
loop     13    count =         8193   x = 111359191417609624287522639983836719785594767307858209957846835838452065572425.000000   factor = 1.000000
loop     14    count =        16385   x = 109800597914356820227888174792217455425055493391577794941886590615663443255054.000000   factor = 1.000000
loop     15    count =        32769   x = 96414658810345146372561987692517769890214451579420879002092098853812765493869.000000   factor = 1.000000
loop     16    count =        65537   x = 73702437796377589363075600062837306092382958111145785719023054607568503562385.000000   factor = 1.000000
loop     17    count =       131073   x = 9422715892770192556959165916105155944914011996654652929596109782947489963631.000000   factor = 1.000000
loop     18    count =       262145   x = 97979435536756989655850082527754963029812322444266676215051178025212311841835.000000   factor = 1.000000
loop     19    count =       524289   x = 112711134657426891057534956938859645199813401264969681794580604884166334121705.000000   factor = 1.000000
loop     20    count =      1048577   x = 92951640163484195131798783186046757440264598761075411523972078926926650280687.000000   factor = 1.000000
loop     21    count =      2097153   x = 87571506315620551897688071333389160733536619216746593863194605647552655394812.000000   factor = 1.000000
loop     22    count =      4194305   x = 58889529646241049459359024512056318140499538756996116170685385153979818843165.000000   factor = 1.000000
loop     23    count =      8388609   x = 108427065557124350379992873337422864982692394677381519882218933341441801981639.000000   factor = 1.000000
loop     24    count =      7408325   x = 94604917468964190987848928898606392533836481003656797666946538615067645225233.000000   factor = 1238926361552897.000000
DONE : used 512 bits of precision.
     : factor of 115792089237316195423570985008687907853269984665640564039457584007913129639937.000000 is 1238926361552897.000000
real 961.94
user 961.93
sys 0.00
dclarke@titan:~/pgm/lastmiles/pollard_rho$ 



